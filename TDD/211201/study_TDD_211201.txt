TDD (Test-driven development)

ㅁ why? 왜 TDD 주도 개발을 하냐?

 - 기능이 정상 동작 
 - 요구 사항 만족
 - 이슈에 대해 예측
 - 버그를 빠르게 발견
 - 자신감 있게 리팩토링
 - 손쉬운 유지 보수
 - 코드의 품질 향상
 - 코드간 의존성을 낮춤
 - 좋은 문서화
 - 시간을 절약

------------------------------

ㅁ Test Pyramid
   - E2E test(UI테스트/사용자 테스트) 
   - Integration test(통합 테스트) : 통합했을때 상호작용을 잘 하는지 (모듈들,클래스들..)
   - Unit test(단위 테스트) *단위: 함수,모듈,클래스..

   ㅇ cost
    E2E > Integration > Unit
   ㅇ speed
    Unit > Integration > E2E

    >>cost,speed 측면에서 Unit test 중점적으로 작성하는게 좋다.(엘리 관점)

-----------------------------

ㅁ TDD 순서
    1. test code 선 작성

    2. run >> fail 뜨면

    3. run success 할 정도의 최소한의 코드 작성

    4. run >> fail 뜨면

    5. run success 할 정도의 최소한의 코드 작성

    5. 3,4 success까지 반복

ㅁ TDD 왜 하냐?

   [ 요구 사항 분석 및 이해 -> 설계 -> TDD -> re-factoring ] 

    >모든 요구사항(목표)에 대해 점검
    >사용자 입장에서 코드를 작성
    >시스템 전반적인 설계 향상
    >개발 집중력 향상

------------------------------

ㅁ TDD 언제 하냐?

   - main repository에 merge하기 전에 TDD된 상태의 code를 포함해 merge 
    효과? -> 좋은 문서화
   
   - 요구사항이 명확할 때
   - 비지니스 로직
   - 협업시 명세서(문서) 역할 ex) a 에게 요 test code 기반으로 코딩할 수 있도록
   - 설계에 대한 고민이 필요 ex)이  클래스와 저 클래스를 상호작용하게 만들자..
   (* UI component를 작성할 땐 TDD사용 별로..- '엘리 관점')

-----------------------------

ㅁ CI/CD
요 챕터 잘 못 들음

-- 유튜브 통해 들은 필기본 --

 ㅁ CI/CD : 개발 ~ 배포까지의 모든 단계들을 자동화를 통해 효율적이고 빠르게 사용자에게 빈번히 배포할수 있도록 만드는 것



ㅇ CI(continuous Integration) - 지속적인 통합
    버그 수정이나 새로 만드는 기능들이
    main repository에 주기적으로 build되고 test되어서 merge하는 것

    1. 코드 변경사항을 주기적으로 빈번하게 머지해야 한다.
    2. 통합을 위한 단계(빌드,테스트,머지)의 자동화

    효과 : - 개발 생산성 향상
        - 문제점을 빠르게 발견 (버그 수정 용이)
        - 코드의 퀄리티 향상

ㅇ CD(continuous delivery/deployment) - 지속적인 제공/배포
    CI단계 : 변경사항(code)들이 자동으로 [ build - test ] 되었다면
    
    CD단계 : [ prepare Release(배포 준비) - deploy Release(release에 이상 없는지) ] -> 수동화 : continuous delivery
                                                                                  -> 자동화 : continuous deployment
                                                                                 --------------------------------
                                                                                 회사마다 수동화/자동화 방식 차이 있음

-------------------------------

